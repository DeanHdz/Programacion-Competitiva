#include <bits/stdc++.h>

using namespace std;


/*
 * Complete the 'decryptPassword' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

string decryptPassword(string s) {
    //97 a 122 chars peque√±o
    //65 a 90 char grande
    string res;    //String desencriptado
    stack<int> st; //Para guardar numeros
    int i=0;       //Navegacion en string encriptado
    
    //Meter a stack los numeros
    while((int)s[i] >= 49 && (int)s[i] <= 57){
        int num = (int)s[i] - 48;
        st.push(num);
        i++;
    }
    
    //Recorrer string encriptado
    i=0;
    while(i < s.size()){
        if((int)s[i] >= 65 && (int)s[i] <= 90){
            if(i+1 < s.size()){
                if((int)s[i+1] >= 97 && (int)s[i+1] <= 122 && s[i+2] == '*'){
                res.push_back(s[i+1]);
                res.push_back(s[i]);
                i=i+3;
                }
                else{
                    res.push_back(s[i]);
                    i++;
                }
            }
            else{
                res.push_back(s[i]);
                i++;
            }
        }
        else if(s[i] == '0'){
            //Al hallar 0 agarrar top del stack... bien
            res.push_back((char)st.top()+48); st.pop();
            i++;
        }
        else if((int)s[i] >= 49 && (int)s[i] <= 57){ 
            //Ignorar numeros iniciales... bien
            i++;
        }
        else if((int)s[i] >= 97 && (int)s[i] <= 122){
            //Debe ser caracter chico, solo hacer push
            res.push_back(s[i]);
            i++;
        }
        else{
            cout << s[i] << " "; //debug
            i++;
        }
    }
    
    return res;
}
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    string result = decryptPassword(s);

    fout << result << "\n";

    fout.close();

    return 0;
}